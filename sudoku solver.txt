#include <bits/stdc++.h>
using namespace std;
bool canPlace(int mat[][9], int i, int j, int n, int number)
{
    for(int x = 0; x < n; x++)
    {
        //Row and Column check
        if(mat[x][j] == number || mat[i][x] == number)
            return false;
    }

    //Sub-grid Check
    int root_n = sqrt(n);
    int sx = (i/root_n)*root_n;
    int sy = (j/root_n)*root_n;

    //Iterate the grid
    for(int x = sx; x < sx + root_n; x++)
    {
        for(int y = sy; y < sy + root_n; y++)
        {
            if(mat[x][y] == number){
                return false;
            }
        }
    }

    //The number can be placed
    return true;
}

bool solve_sudoku(int mat[][9],int i, int j, int n)
{
    //base case
    if(i == n)
    {
        //all the rows are completely filled
        //print the solution
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                cout << mat[i][j]<<" ";
            }
            cout << endl;
        }        
        return true;
    }
    //If the row ends, we need to move to the next row
    if(j == n)
    {
        return solve_sudoku(mat,i+1,0,n);
    }
    //Skip the pre-filled cells
    if( mat[i][j] != 0 )
    {
        //jump to the next cell in the same row
        return solve_sudoku(mat,i,j+1,n);
    }

    //Recursive case
    //Fill the current cell with possible options
    for(int number = 1; number <= n; number++)
    {
        if( canPlace(mat,i,j,n,number) )
        {
            //Assume that it is the correct number at the correct position
            mat[i][j] = number;
            //Call on next cell to solve the sudoku
            bool couldWeSolve = solve_sudoku(mat,i,j+1,n);
            if(couldWeSolve == true){
                return true;
            }
        }
    }
    //upar waale for loop se humne 1 se lekar n tk saare numbers rakhkr dekh liye lekin baat nahi bani toh hume sse wapis zero krna hai
    //Backtrack here   
    mat[i][j] = 0;
    return false;  //current cell se sudoku solve nahi kar paaye 
}
int main() {
    int mat[9][9];
    int n;
    cin >> n;
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < n; j++)
        {
            cin >> mat[i][j];
        }
    }   
    solve_sudoku(mat,0,0,n);
    return 0;
}
