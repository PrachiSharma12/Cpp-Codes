#include <iostream>
using namespace std;

class node{
    public:
        int data;
        node* next;

    //constructor
    node(int data){
        this->data = data;
        this->next = NULL;
    }    
};
void insertAtTail(node* &head,int data)
{
    node* n = new node(data);
	if (head==NULL){
		head = n;
		return;
	}

	node* temp = head;
	while(temp->next != NULL) {
	    temp = temp->next;
	}
	temp->next = n;
}
void print(node* head)
{
    node* temp = head;
    while(temp != NULL)
    {
        cout<<temp->data<<" ";
        temp = temp->next;
    }
    cout<<endl;
}
void kthNodeFromTheEnd(node* head,int k)
{
        //we need (n-k)th node from the beginning
    //Using runner technique
    node* fast = head;
    node* slow = head;
    //1. Move fast ptr k steps ahead
    for(int i = 0; i < k ; i++){
        fast = fast->next;
    }
    //2. Move slow and fast simpultaneously 1 step till the end
    while(fast != NULL){
        fast = fast->next;
        slow = slow->next;
    }
    //Now slow is the (n-k)th node from the beginning
    cout<<slow->data<<endl;
}

int main() {
    node* head = NULL;
    long long int k;
    int no;
    cin>>no;
    while(no != -1){
        insertAtTail(head,no);
        cin>>no;
    }
    cin>>k;
    kthNodeFromTheEnd(head,k);
}