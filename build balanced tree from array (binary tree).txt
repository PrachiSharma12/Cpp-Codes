#include <bits/stdc++.h>
using namespace std;

class node{
    public:
        int data;
        node* left;
        node* right;
    //Constructor
    node(int d){
        data = d;
        left = NULL;
        right = NULL;
    }   
};
node* bulidTreeFromArray(int* arr, int start, int end){  //function to build balanced tree from given array
    //base case
    if(start > end){
        return NULL;
   }
   //Recursive case
   int mid = (start + end)/2;
   node* root = new node(arr[mid]);
   root->left = bulidTreeFromArray(arr,start,mid-1);
   root->right = bulidTreeFromArray(arr,mid+1,end);
   return root;
}
void bfs_with_endl(node* root){
    queue<node*> q;
    q.push(root);
    q.push(NULL);

    while(!q.empty()){
        node* f = q.front();

        //if null is encountered, change the line and push a null again
        if(f == NULL){
            cout << endl;
            q.pop();
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
            cout<<f->data<<" ";
            q.pop();
            //if left child exists
            if(f->left){
                q.push(f->left);
            }
            //if right child exists
            if(f->right){
                q.push(f->right);
            }
        }
    }
    return;
}

int main() {
    int arr[1000];
    int n;
    cin >> n;
    for(int i = 0; i < n; i++){
        cin >> arr[i];
    }
    node* root = bulidTreeFromArray(arr,0,n-1);
    bfs_with_endl(root);
}
