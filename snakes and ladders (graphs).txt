#include <iostream>
#include <queue>
#include <map>
#include <climits>
#include <list>
using namespace std;

template<typename T>
class Graph{
    //Adj list
    map<T, list<T> > l;
public:
    void addEgde(int x, int y){
        //Directed edges (unidirectional)
        l[x].push_back(y);
    }

    int bfs(T src, T dest){
        map<T ,int> dist; 
        queue<T> q;

       //All the undiscovered nodes will be at infinite distance from the source
       for(auto node_pair:l){  // node_pair = key and value pair
           T node = node_pair.first;
           dist[node] = INT_MAX;      
       }
        q.push(src);
       //But the distance of the source node from itself will be 0, so changing that
       dist[src] = 0;        

        while(!q.empty()){
            T node = q.front();
            //2.pop that node and print
            q.pop();   //fifo
           // cout << node <<" ";  //porder will depend on insertion of adjacency list
            
            //3.push the unvisited neighbours of this node in the queue
            for(int nbr : l[node]){
                if(dist[nbr] == INT_MAX){  //this node is being visited the first time
                    q.push(nbr);
                    //and mark this nbr as visited
                    dist[nbr] = dist[node] + 1; //distance of parent node + 1
                }
            }
        }

        //Print the distance of destination from the source
        return dist[dest];   //this actually returns the minimum number of dice throws to reach the dest from src        
        }
};
int main() {
    int board[50] = {0};    //initially, no snake no ladder

    //Snakes //Ladders
    //If locations are given...
    //If there is a ladder from 2 to 15....jump will be positive (15-2 = 13) --> board[2] = 13
    //If there is a snake from  17 to 4....fall will be negative (17-4) i.e 4-17 = -13 --> board[17] = -13
    board[2] = 13; 
    board[5] = 2; 
    board[9] = 18; 
    board[18] = 11; 
    board[17] = -13; 
    board[20] = -14; 
    board[24] = -8;
    board[25] = 10;  
    board[32] = -2; 
    board[34] = -22; 

    //Add edges to the graph
    Graph<int> g;

    for(int i = 0 ;i <= 36; i++){       
        //for every i...we have 6 possibilities
        for(int dice = 1; dice <= 6; dice++){
            int j = i + dice;  //considering i to j as an edge
            j+= board[j];   //board[j]  can be 0, jump or fall

            if(j <= 36){ //Because we have only 36 vertices/nodes in our graph
                g.addEgde(i,j);    //Directed edges
            }
        }
    }
    g.addEgde(36,36);  //this will tell the graph that we have a node 36 and we have to consider it

    cout << g.bfs(0,36) << endl;;
    return 0;
}

