#include <iostream>
using namespace std;

//Implementation of hashtable
//Separate chaining technique

template<typename T>
class node{
public: 
    string key;
    T value;
    node<T>* next;

    //constructor
    node(string key, int val){
        this->key = key;
        value = val;
        next = NULL;
    }
    //destructor
    ~node(){
        if(next != NULL){
            delete next;
        }
    }
};

template<typename T>
class hashtable{
    node<T>** table;  //pointer to an array of pointers
    int table_size;
    int current_size;

    //private hash function because we don't want anyone to change it
    int hashfunction(string key){
        int idx = 0;
        int p = 1;
        for(int j = 0; j < key.length(); j++){
            idx += (key[j]*p) % table_size;
            idx = idx % table_size;
            p = (p*27) % table_size;

            //mod on every step to prevent overflow
            //overflow leads to negative idx
            //using (a + b + c)%m = (a%m + b%m + c%m) %m
        }
        return idx;
    }

public:
    //constructor
    hashtable(int ts = 7){  // default size = 7
        table_size = ts;
        current_size = 0;
        table = new node<T>*[table_size];  //like arr = new int[10]
        
        //Initialise all the buckets with NULL
        for(int i = 0; i < table_size; i++){
            table[i] = NULL;
        }
    }

    void insert(string key, T value){
        int idx = hashfunction(key);

        //create a new node
        node<T>* n = new node<T>(key,value);

        //Insert at head of the linked list with id = idx
        n->next = table[idx];
        table[idx] = n;
        current_size++;

        //rehash...
    }

    void print(){
        for(int i = 0; i < table_size; i++){
            cout <<"Bucket " << i << "->";
            node<T>* temp = table[i];
            while(temp != NULL){
                cout << temp->key << "->";
                temp = temp -> next;
            }
            cout << endl;
        }
    }

    T* search(string key){  //return type is pointer, because if element not found we have to retunr NULL ptr 
    //because we cannot return -1 as it is int specific and not T, so we cannot return any garbage value 
        //1. find idx
        int idx = hashfunction(key);
        //2. traverse that linked list
        node<T>* temp = table[idx];
        while(temp != NULL){
            if(temp->key == key){
                return &temp->value;  //& -> return type is pointer, therefore we return address
            }
            temp = temp->next;
        }
        return NULL; //T*
    }

	//write delete function too

    T& operator[](string key){
        T* f = search(key);

        //if key not found, insert any garbage value for the sake of adding the key in the hashtable
        if(f == NULL){
            //Insert key, garbge value in hashtable
            T garbage;
            insert(key,garbage);
            //now return the address of this key
            f = search(key);
        }
        return *f;
    }
};
int main() {
    
    hashtable<int> price_menu;
    price_menu.insert("Burger",120);
    price_menu.insert("Pizza",220);
    price_menu.insert("Noodles",100);
    price_menu.insert("Chips",20);
    price_menu.insert("Fries",110);

    int *price = price_menu.search("Noodles");

    if(price == NULL){
        cout << "Not found" <<endl;
    }
    else{
        cout << "Price is " << *price << endl;
    }

    //Operator overloading

    //Insert
    price_menu["Dosa"] = 60;
    //Update
    price_menu["Dosa"] += 10;
    //Search
    cout << "Price of Dosa ";
    cout << price_menu["Dosa"] << endl;

    price_menu.print();
}
