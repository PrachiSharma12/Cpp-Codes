#include <bits/stdc++.h>
using namespace std;

template<typename T>
class Graph{
    unordered_map<T, list<pair<T,int> > >m;  //we can also use map
public:
    void addEdge(T u, T v, int dist, bool bidirectional = true){
        m[u].push_back(make_pair(v,dist));
        if(bidirectional){
            m[v].push_back(make_pair(u,dist));
        }

    }   
    void printAdjList(){
        //printing the adjacency list
        //Iterate over all the key value pairs in the map
        for(auto j:m){
            cout << j.first <<"-->";
            //iterate over all the nbrs of j
            for(auto l: j.second){
                cout <<"("<<l.first<<", "<<l.second<<")";
            }
            cout << endl;
        }
    } 
    void dijsktraSSSP(T src){
        unordered_map<T,int> dist;
        //Set all distance to infinity
        for(auto j:m){
            dist[j.first] = INT_MAX; 
        }

        //Make a set to find out a node with the minimum distance
        set<pair<int, T> > s;   //sorting according to first parameter i.e distance(int)

        //set the distance of src = 0
        dist[src] = 0;

        s.insert(make_pair(0,src));

        while(!s.empty()){
            //Find the pair at the front (min distance)
            auto p = *(s.begin());  // will give the pair with the min distance
            T node = p.second;

            int nodeDist = p.first; //distance finalised
            //remove this node from the set
            s.erase(s.begin());

            //Iterate over the nbrs/children of the current node
            for(auto childPair:m[node]){
                //update the distance of each child, if it is min
                if(nodeDist + childPair.second <= childPair.first){  //(distance[parent] + wt of edge < prev distance of the child)  //in vid it was only <, which showed error (doubt)

                    //In a set, updation of a particular is not possible
                    //we have to remove the old pair and insert the new pair in order to update
                    T dest = childPair.first;
                    auto f = s.find(make_pair(dist[dest],dest));
                    if(f != s.end()){  //found
                        s.erase(f);
                    }

                    //insert the new pair
                    dist[dest] = nodeDist + childPair.second;
                    s.insert(make_pair(dist[dest],dest));

                }
            }
        }

        //Let's print distances to all other nodes
        for(auto d:dist){
            cout <<d.first<<" is located at a distance of "<<d.second<<" from the source"<< endl;
        }
    }
};

int main() {
    Graph<int> g;

    g.addEdge(1,2,1);
    g.addEdge(1,3,4);
    g.addEdge(2,3,1);
    g.addEdge(3,4,2);
    g.addEdge(1,4,7);

    //g.printAdjList();
    g.dijsktraSSSP(1);
}
