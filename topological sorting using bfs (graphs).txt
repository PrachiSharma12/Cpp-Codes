#include <iostream>
#include <list>
#include <queue>
using namespace std;

class Graph{
    //Array of lists
    list<int> *l;
    int V;

public:
    Graph(int V){
        this->V = V;
        l = new list<int>[V]; //Array (of lists) of size V {V no of lists are there}
    }    
    void addEdge(int x, int y){
        //Directed graph
        l[x].push_back(y);
    }
    void topological_sort(){
        //Array of indegree of each node
        int *indegree = new int[V+1];
        //initialise with 0
        for(int i = 0; i < V; i++){
            indegree[i] = 0;
        }
        //Update indegree by traversing edges
        //If x->y (y is dependent on x), then indegree[y]++
        for(int i = 0; i < V; i++){
            for(auto y:l[i]){
                indegree[y]++;
            }
        }

        //bfs
        queue<int> q;
        //step 1. Find the nodes with 0 indegree
        for(int i = 0; i < V; i++){
            if(indegree[i] == 0){
                q.push(i);
            }
        }

        //step 2. start removing elements from the queue
        while(!q.empty()){
            int node = q.front();
            cout << node <<" ";
            q.pop();

            //iterate over the nbrs of that node and redue their indegree by 1
            for(auto nbr:l[node]){
                indegree[nbr]--;
                if(indegree[nbr] == 0){
                    q.push(nbr);
                }
            }
        }
    }
}; 
int main() {
    Graph g(6);
    g.addEdge(0,2);
    g.addEdge(1,2);
    g.addEdge(1,4);
    g.addEdge(2,3);
    g.addEdge(2,5);
    g.addEdge(3,5);
    g.addEdge(4,5);

    g.topological_sort();
    
}
